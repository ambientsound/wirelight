// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LED_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LED_reflection_ = NULL;
const ::google::protobuf::Descriptor* None_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  None_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_pb_2eproto() {
  protobuf_AddDesc_pb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb.proto");
  GOOGLE_CHECK(file != NULL);
  LED_descriptor_ = file->message_type(0);
  static const int LED_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LED, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LED, rgb_),
  };
  LED_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LED_descriptor_,
      LED::default_instance_,
      LED_offsets_,
      -1,
      -1,
      -1,
      sizeof(LED),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LED, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LED, _is_default_instance_));
  None_descriptor_ = file->message_type(1);
  static const int None_offsets_[1] = {
  };
  None_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      None_descriptor_,
      None::default_instance_,
      None_offsets_,
      -1,
      -1,
      -1,
      sizeof(None),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(None, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(None, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LED_descriptor_, &LED::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      None_descriptor_, &None::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_2eproto() {
  delete LED::default_instance_;
  delete LED_reflection_;
  delete None::default_instance_;
  delete None_reflection_;
}

void protobuf_AddDesc_pb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_pb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010pb.proto\"!\n\003LED\022\r\n\005index\030\001 \001(\r\022\013\n\003rgb\030"
    "\002 \001(\007\"\006\n\004None2!\n\tLEDServer\022\024\n\003Set\022\004.LED\032"
    "\005.None(\001b\006proto3", 96);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb.proto", &protobuf_RegisterTypes);
  LED::default_instance_ = new LED();
  None::default_instance_ = new None();
  LED::default_instance_->InitAsDefaultInstance();
  None::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_2eproto {
  StaticDescriptorInitializer_pb_2eproto() {
    protobuf_AddDesc_pb_2eproto();
  }
} static_descriptor_initializer_pb_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LED::kIndexFieldNumber;
const int LED::kRgbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LED::LED()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LED)
}

void LED::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LED::LED(const LED& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LED)
}

void LED::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  index_ = 0u;
  rgb_ = 0u;
}

LED::~LED() {
  // @@protoc_insertion_point(destructor:LED)
  SharedDtor();
}

void LED::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LED::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LED::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LED_descriptor_;
}

const LED& LED::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_2eproto();
  return *default_instance_;
}

LED* LED::default_instance_ = NULL;

LED* LED::New(::google::protobuf::Arena* arena) const {
  LED* n = new LED;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LED::Clear() {
// @@protoc_insertion_point(message_clear_start:LED)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LED, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LED*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, rgb_);

#undef ZR_HELPER_
#undef ZR_

}

bool LED::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LED)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_rgb;
        break;
      }

      // optional fixed32 rgb = 2;
      case 2: {
        if (tag == 21) {
         parse_rgb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rgb_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LED)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LED)
  return false;
#undef DO_
}

void LED::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LED)
  // optional uint32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional fixed32 rgb = 2;
  if (this->rgb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->rgb(), output);
  }

  // @@protoc_insertion_point(serialize_end:LED)
}

::google::protobuf::uint8* LED::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LED)
  // optional uint32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional fixed32 rgb = 2;
  if (this->rgb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->rgb(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LED)
  return target;
}

int LED::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LED)
  int total_size = 0;

  // optional uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // optional fixed32 rgb = 2;
  if (this->rgb() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LED::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LED)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LED* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LED>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LED)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LED)
    MergeFrom(*source);
  }
}

void LED::MergeFrom(const LED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LED)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.rgb() != 0) {
    set_rgb(from.rgb());
  }
}

void LED::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LED::CopyFrom(const LED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LED::IsInitialized() const {

  return true;
}

void LED::Swap(LED* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LED::InternalSwap(LED* other) {
  std::swap(index_, other->index_);
  std::swap(rgb_, other->rgb_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LED::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LED_descriptor_;
  metadata.reflection = LED_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LED

// optional uint32 index = 1;
void LED::clear_index() {
  index_ = 0u;
}
 ::google::protobuf::uint32 LED::index() const {
  // @@protoc_insertion_point(field_get:LED.index)
  return index_;
}
 void LED::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:LED.index)
}

// optional fixed32 rgb = 2;
void LED::clear_rgb() {
  rgb_ = 0u;
}
 ::google::protobuf::uint32 LED::rgb() const {
  // @@protoc_insertion_point(field_get:LED.rgb)
  return rgb_;
}
 void LED::set_rgb(::google::protobuf::uint32 value) {
  
  rgb_ = value;
  // @@protoc_insertion_point(field_set:LED.rgb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

None::None()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:None)
}

void None::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

None::None(const None& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:None)
}

void None::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

None::~None() {
  // @@protoc_insertion_point(destructor:None)
  SharedDtor();
}

void None::SharedDtor() {
  if (this != default_instance_) {
  }
}

void None::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* None::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return None_descriptor_;
}

const None& None::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_2eproto();
  return *default_instance_;
}

None* None::default_instance_ = NULL;

None* None::New(::google::protobuf::Arena* arena) const {
  None* n = new None;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void None::Clear() {
// @@protoc_insertion_point(message_clear_start:None)
}

bool None::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:None)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:None)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:None)
  return false;
#undef DO_
}

void None::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:None)
  // @@protoc_insertion_point(serialize_end:None)
}

::google::protobuf::uint8* None::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:None)
  // @@protoc_insertion_point(serialize_to_array_end:None)
  return target;
}

int None::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:None)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void None::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:None)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const None* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const None>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:None)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:None)
    MergeFrom(*source);
  }
}

void None::MergeFrom(const None& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:None)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void None::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:None)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void None::CopyFrom(const None& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:None)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool None::IsInitialized() const {

  return true;
}

void None::Swap(None* other) {
  if (other == this) return;
  InternalSwap(other);
}
void None::InternalSwap(None* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata None::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = None_descriptor_;
  metadata.reflection = None_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// None

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
